var documenterSearchIndex = {"docs":
[{"location":"man/Example2/#Example-2","page":"Example 2","title":"Example 2","text":"","category":"section"},{"location":"man/Example2/","page":"Example 2","title":"Example 2","text":"using DataFrames, Compose, Gadfly\nusing CoupledFields, LinearAlgebra, Random, Statistics\nset_default_graphic_size(21cm, 14cm)\n\n\nfunction rHypersphere(n::Int, k::Int)\n    Q = qr(randn(k,k)).Q\n    return Q[:,1:n]  \nend\n\nfunction simfn(n::Int, p::Int, sc::Float64)\n    Wx = rHypersphere(2,p)\n    Wy = rHypersphere(2,2)\n    X = sc*rand(n,p) .- 0.5*sc\n    xstar = X*Wx\n    ystar = zscore([6.3*xstar[:,1].*exp.(-0.1*xstar[:,1].^2) randn(n)],1)\n    Y =  ystar / Wy\n    return zscore(X,1), Y, xstar, ystar\nend\n\ncreateDF = function(df::Int, R::Vector, Y::Matrix{Float64})\n    Xs = bf(R, df)\n    CCAm = cca([-9. -9.], Xs, Y)\n    return DataFrame(x=R, y= CCAm.T[:,1], y2 = CCAm.R[:,1].-mean(CCAm.R[:,1]), df=\"df=$df\")\nend    \n\nRandom.seed!(1234)\nX, Y, xstar, ystar = simfn(200, 2, 30.0)\n\nkpars = GaussianKP(X)\ngKCCAm = gKCCA([0.4, -5, 1], X, Y, kpars )\n\nplotfn = function(v)\n    mlfs = 10pt\n    D1= vcat([createDF(df, gKCCAm.R[:,1], Y) for df in v]...)\n    \nplot(D1, xgroup=:df,\n    Geom.subplot_grid(Coord.cartesian(ymin=-3, ymax=3),\n        layer(x=:x, y=:y2, Geom.line, Theme(default_color=colorant\"red\")),\n        layer(x=:x, y=:y, Geom.point)\n    ),\n    Guide.ylabel(\"<b>YA₁</b>\"),\n    Theme(plot_padding=[0mm], major_label_font_size=mlfs)\n )\nend\n\npb = plotfn(4:6)\npush!(pb, Guide.xlabel(\"<b>XW₁</b> (gKCCA)\" ))\n\ncompose(context(),\n    (context(0, 0, 1.0, 0.45), render(plotfn(1:3))),\n    (context(0, 0.45, 1.0, 0.55), render(pb))\n)","category":"page"},{"location":"lib/library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/library/#Contents","page":"Library","title":"Contents","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Pages = [\"library.md\"]","category":"page"},{"location":"lib/library/#Types","page":"Library","title":"Types","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"InputSpace\nModelObj\nKernelParameters\nGaussianKP\nPolynomialKP","category":"page"},{"location":"lib/library/#CoupledFields.InputSpace","page":"Library","title":"CoupledFields.InputSpace","text":"InputSpace(X, Y, d, lat)\n\nA type to hold the X and Y fields of the Input space.   The fields are whitened if d=[d1, d2] is supplied.   Area weighting is applied if lat is supplied.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#CoupledFields.ModelObj","page":"Library","title":"CoupledFields.ModelObj","text":"ModelObj(W, R, A, T, evals, pars, method)\n\nA type to hold statistical model results, such as the matrices W, R, A, T, where R=XW and T=YA.  \n\n\n\n\n\n","category":"type"},{"location":"lib/library/#CoupledFields.KernelParameters","page":"Library","title":"CoupledFields.KernelParameters","text":"KernelParameters\n\nAn abstract type. \n\nAll KernelParameters types contain certain parameters which are later passed to internal functions Kf and ∇Kf. \n\nA KernelParameters type is set using e.g. PolynomialKP(X::Matrix{Float64}) or GaussianKP(X::Matrix{Float64}). \n\n\n\n\n\n","category":"type"},{"location":"lib/library/#CoupledFields.GaussianKP","page":"Library","title":"CoupledFields.GaussianKP","text":"GaussianKP(X)\n\nFor the gaussian kernel.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#CoupledFields.PolynomialKP","page":"Library","title":"CoupledFields.PolynomialKP","text":"PolynomialKP(X)\n\nFor the polynomial kernel.\n\n\n\n\n\n","category":"type"},{"location":"lib/library/#Functions","page":"Library","title":"Functions","text":"","category":"section"},{"location":"lib/library/","page":"Library","title":"Library","text":"Modules = [CoupledFields]\nOrder   = [:function]","category":"page"},{"location":"lib/library/#CoupledFields.CVfn-Tuple{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Function, DataType}","page":"Library","title":"CoupledFields.CVfn","text":"CVfn(parm::Matrix, X::Matrix, Y::Matrix, modelfn::Function, kerneltype::DataType; verbose=true, dcv=2)\n\nCross-validation function\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.Rsq_adj-Tuple{Array{Float64, N} where N, Array{Float64, N} where N, Int64}","page":"Library","title":"CoupledFields.Rsq_adj","text":"Rsq_adj(Tx::Array, Ty::Array, df::Int)\n\nCross-validation metric\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.bf-Tuple{Vector{Float64}, Int64}","page":"Library","title":"CoupledFields.bf","text":"bf(x::Vector, df::Int)\n\nCompute a piecewise linear basis matrix for the vector x.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.cca-Tuple{Array{Float64, N} where N, Matrix{Float64}, Matrix{Float64}}","page":"Library","title":"CoupledFields.cca","text":"cca(v::Array, X::Matrix, Y::Matrix)\n\nRegularized Canonical Correlation Analysis using SVD. \n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.gKCCA-Tuple{Array{Float64, N} where N, Matrix{Float64}, Matrix{Float64}, KernelParameters}","page":"Library","title":"CoupledFields.gKCCA","text":"gKCCA(par::Array, X::Matrix, Y::Matrix, kpars::KernelParameters)\n\nCompute the projection matrices and components for gKCCA.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.gradient","page":"Library","title":"CoupledFields.gradient","text":"gradient(Z::Array; axs::Tuple=axes(Z), smoothness=1.0)\n\nCompute the gradient of field Z. Use axs to supply a tuple of point ranges for each dimension. \n\nThe method is based on the gradient function of a Gaussian kernel: smoothness scales an auto-estimate of Gaussian σ, a large value will make the gradient function linear.   \n\nZ can be any dimensions, but the method may be slow if length(Z)>10³. \n\ngradient(X::Matrix, Y::Matrix; smoothness=1.0)\n\nCompute g  for Y = g(X) where X is the position values (rows = points), and Y is the field values (e.g. a 1-column matrix). The points can have irregular positions. The method may be slow if size(X, 1)>10³. \n\nSee Example 3\n\n\n\n\n\n","category":"function"},{"location":"lib/library/#CoupledFields.gradvecfield-Tuple{Array{Float64, N} where N, Matrix{Float64}, Matrix{Float64}, KernelParameters}","page":"Library","title":"CoupledFields.gradvecfield","text":"gradvecfield(par::Array, X::Matrix, Y::Matrix, kpars::KernelParameters)\n\nCompute the gradient vector or gradient matrix at each instance of the X and Y fields, by making use of a kernel feature space.\n\n\n\n\n\n","category":"method"},{"location":"lib/library/#CoupledFields.whiten-Tuple{Matrix{Float64}, Float64}","page":"Library","title":"CoupledFields.whiten","text":"whiten(X::Matrix, d::Float64; lat=nothing)\n\nWhiten X.  \n\nd (0-1) Percentage variance of components to retain. \n\nlat Latitudinal area-weighting.\n\n\n\n\n\n","category":"method"},{"location":"man/Example1/#Example-1","page":"Example 1","title":"Example 1","text":"","category":"section"},{"location":"man/Example1/","page":"Example 1","title":"Example 1","text":"using CoupledFields, DataFrames, Gadfly\nusing LinearAlgebra, Random\nset_default_plot_size(21cm,12cm)\n\nfunction rHypersphere(n::Int, k::Int)\n    Q = qr(randn(k,k)).Q\n    return Q[:,1:n]\nend\n\nfunction simfn(n::Int, p::Int, sc::Float64)\n    Wx = rHypersphere(2,p)\n    Wy = rHypersphere(2,2)\n    X = sc*rand(n,p) .- 0.5*sc\n    xstar = X * Wx\n    ystar = zscore([6.3*xstar[:,1].*exp.(-0.1*xstar[:,1].^2) randn(n)],1)\n    Y =  ystar / Wy\n    return zscore(X,1), Y, xstar, ystar\nend\n\nfunction createDF(c::Float64, X::Matrix, Y::Matrix, kpars::KernelParameters; sc=1.0)\n    ∇g = hcat(gradvecfield([c -7.0], X, Y, kpars)...)'\n    vecf = [X-∇g*sc X+∇g*sc] \n    DataFrame(x=X[:,1], y=X[:,2], x1=vecf[:,1], y1=vecf[:,2], x2=vecf[:,3],\n        y2=vecf[:,4], col=Y[:,1], par=\"σ = $c\"*\"σ<sub>med</sub>\")\nend\n\nRandom.seed!(1234)\nX, Y, xstar, ystar = simfn(200, 2, 30.0)\n\nkpars = GaussianKP(X)\nD = vcat([createDF(c, X, ystar[:,1:1], kpars, sc=0.05) for c in [0.5 0.05]]...)\n\n\ncolscale = Scale.color_continuous(minvalue=-2.0, maxvalue=2.0)\ncoord = Coord.cartesian(xmin=-2.0, xmax=2.0, ymin=-2.0, ymax=2.0)\n\nplot(D, x=:x, y=:y, color=:col,  xgroup=:par,\n    Geom.subplot_grid(coord,\n        layer(x=:x1, y=:y1, xend=:x2, yend=:y2, color=:col, Geom.vector),\n        layer(Geom.point, Theme(point_size=2pt)) \n    ), colscale,\n    Scale.x_continuous(minvalue=-2.0, maxvalue=2.0),\n    Scale.y_continuous(minvalue=-2.0, maxvalue=2.0),\n    Guide.xlabel(\"<b>X₁</b>\"),\n    Guide.ylabel(\"<b>X₂</b>\"),\n    Guide.colorkey(title=\"Y\")\n)","category":"page"},{"location":"man/Example3/#Example-3","page":"Example 3","title":"Example 3","text":"","category":"section"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"using CoupledFields\nusing CoupledFields: ndgrid\n\nfunction gauss3d(X::AbstractMatrix)\n    r = sum(abs2, X, dims=2)\n    return exp.(-r)\nend\n\nfunction gauss3d(X::Tuple)\n    r = reduce(+, [x.^2 for x in X])\n    return exp.(-r)\nend","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"# Irregular points in a cube\nX = 4.0.*rand(300,3).-2\nY = gauss3d(X)\n∇g = 1.2*gradient(X, Y[:,1:1])\nsize(∇g)","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"# using Plots\nquiver(eachcol(X)..., quiver=(∇g[:,1],∇g[:,2],∇g[:,3]), line_z=repeat(vec(Y), inner=4), \n  c=:viridis)","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"(Image: )","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"# Regular points in a cube\ni = range(-2, 2, 6)\nX2 = ndgrid(i, i, i)\nZ = gauss3d(X2)\n# if Z is an array, use `axs` for point range per dimension \n∇g = gradient(Z, axs=(i,i,i))\nsize(∇g)","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"X3 = reduce(hcat, vec.(X2))\nquiver(eachcol(X3)..., quiver=(∇g[:,1],∇g[:,2],∇g[:,3]), line_z=repeat(vec(Z), inner=4),\n  c=:viridis) ","category":"page"},{"location":"man/Example3/","page":"Example 3","title":"Example 3","text":"(Image: )","category":"page"},{"location":"#CoupledFields.jl","page":"Home","title":"CoupledFields.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A julia package for working with coupled fields.","category":"page"},{"location":"#Guide","page":"Home","title":"Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = joinpath.(\"man\", readdir(\"man\"))\nDepth = 1","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [joinpath(\"lib\",\"library.md\")]","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The documentation was built using Documenter.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"Documentation built with Julia $(VERSION).\") # hide","category":"page"}]
}
